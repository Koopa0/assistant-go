package main

import (
	"fmt"
	"log"
	"os"

	"golang.org/x/crypto/bcrypt"
)

func main() {
	password := "KoopaAssistant2024!"

	// Generate bcrypt hash
	hash, err := bcrypt.GenerateFromPassword([]byte(password), bcrypt.DefaultCost)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Printf("Password: %s\n", password)
	fmt.Printf("Hash: %s\n", hash)

	// Verify the hash works
	err = bcrypt.CompareHashAndPassword(hash, []byte(password))
	if err != nil {
		log.Fatal("Hash verification failed!")
	}
	fmt.Println("✅ Hash verified successfully!")

	// Update the SQL file
	sqlContent := fmt.Sprintf(`-- Seed user for Koopa
-- Password: KoopaAssistant2024!

-- Insert Koopa user with hashed password
INSERT INTO users (
    id,
    username,
    email,
    password_hash,
    full_name,
    is_active,
    is_verified,
    role,
    preferences,
    created_at,
    updated_at
) VALUES (
    'a0000000-0000-4000-8000-000000000001'::uuid,
    'koopa',
    'koopa@assistant.local',
    '%s',
    'Koopa',
    true,
    true,
    'admin',
    '{"theme": "dark", "language": "zh-TW", "defaultProgrammingLanguage": "Go"}'::jsonb,
    CURRENT_TIMESTAMP,
    CURRENT_TIMESTAMP
) ON CONFLICT (email) DO NOTHING;
`, hash)

	err = os.WriteFile("seed_user_koopa.sql", []byte(sqlContent), 0644)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println("✅ Updated seed_user_koopa.sql with bcrypt hash")
}
