// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: copyfrom.go

package sqlc

import (
	"context"
)

// iteratorForBatchCreateMemoryEntries implements pgx.CopyFromSource.
type iteratorForBatchCreateMemoryEntries struct {
	rows                 []BatchCreateMemoryEntriesParams
	skippedFirstNextCall bool
}

func (r *iteratorForBatchCreateMemoryEntries) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForBatchCreateMemoryEntries) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].MemoryType,
		r.rows[0].UserID,
		r.rows[0].SessionID,
		r.rows[0].Content,
		r.rows[0].Importance,
		r.rows[0].AccessCount,
		r.rows[0].LastAccess,
		r.rows[0].ExpiresAt,
		r.rows[0].Metadata,
	}, nil
}

func (r iteratorForBatchCreateMemoryEntries) Err() error {
	return nil
}

// =====================================================
// BATCH OPERATIONS FOR PERFORMANCE
// =====================================================
// Bulk insert memory entries for performance
func (q *Queries) BatchCreateMemoryEntries(ctx context.Context, arg []BatchCreateMemoryEntriesParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"memory_entries"}, []string{"memory_type", "user_id", "session_id", "content", "importance", "access_count", "last_access", "expires_at", "metadata"}, &iteratorForBatchCreateMemoryEntries{rows: arg})
}
