// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: conversations_extensions.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const GetActiveConversations = `-- name: GetActiveConversations :many
SELECT id, user_id, title, summary, metadata, is_archived, created_at, updated_at
FROM conversations
WHERE user_id = $1 AND is_archived = false
ORDER BY updated_at DESC
LIMIT $2
`

type GetActiveConversationsParams struct {
	UserID pgtype.UUID `json:"user_id"`
	Limit  int32       `json:"limit"`
}

func (q *Queries) GetActiveConversations(ctx context.Context, arg GetActiveConversationsParams) ([]*Conversation, error) {
	rows, err := q.db.Query(ctx, GetActiveConversations, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Conversation{}
	for rows.Next() {
		var i Conversation
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Summary,
			&i.Metadata,
			&i.IsArchived,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetArchivedConversations = `-- name: GetArchivedConversations :many
SELECT id, user_id, title, summary, metadata, is_archived, created_at, updated_at
FROM conversations
WHERE user_id = $1 AND is_archived = true
ORDER BY updated_at DESC
`

func (q *Queries) GetArchivedConversations(ctx context.Context, userID pgtype.UUID) ([]*Conversation, error) {
	rows, err := q.db.Query(ctx, GetArchivedConversations, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Conversation{}
	for rows.Next() {
		var i Conversation
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Summary,
			&i.Metadata,
			&i.IsArchived,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UnarchiveConversation = `-- name: UnarchiveConversation :exec

UPDATE conversations
SET is_archived = false,
    updated_at = NOW()
WHERE id = $1
`

// Additional conversation queries that were missing
func (q *Queries) UnarchiveConversation(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, UnarchiveConversation, id)
	return err
}

const UpdateConversationSummary = `-- name: UpdateConversationSummary :exec
UPDATE conversations
SET summary = $2,
    updated_at = NOW()
WHERE id = $1
`

type UpdateConversationSummaryParams struct {
	ID      pgtype.UUID `json:"id"`
	Summary pgtype.Text `json:"summary"`
}

func (q *Queries) UpdateConversationSummary(ctx context.Context, arg UpdateConversationSummaryParams) error {
	_, err := q.db.Exec(ctx, UpdateConversationSummary, arg.ID, arg.Summary)
	return err
}
