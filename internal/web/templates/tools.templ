package templates

import (
	"fmt"
	"strconv"
	"github.com/koopa0/assistant-go/internal/web/i18n"
)

// ToolsPageData represents the data for the tools dashboard
type ToolsPageData struct {
	AppLayoutData
	Tools []ToolCardData
}

type ToolCardData struct {
	ID          string
	Name        string
	Description string
	Icon        string
	Status      string // "active", "idle", "error", "maintenance"
	StatusText  string
	LastUsed    string
	UsageToday  int
	SuccessRate float32
	ConfigURL   string
}

// ToolsPage implements the tools dashboard based on ui.md specifications
templ ToolsPage(data ToolsPageData) {
	@AppLayout(data.AppLayoutData, toolsPageContent(data))
}

templ toolsPageContent(data ToolsPageData) {
	<div class="tools-container">
		<div class="tools-header">
			<h1 class="page-title">{ i18n.T("tools.overview", data.Lang) }</h1>
			<p class="page-subtitle">{ i18n.T("tools.subtitle", data.Lang) }</p>
		</div>
		
		<div class="tools-grid">
			for _, tool := range data.Tools {
				@ToolCardComponent(tool, data.Lang)
			}
		</div>
	</div>
}

templ ToolCardComponent(tool ToolCardData, lang string) {
	<div class="tool-card" data-tool-id={ tool.ID }>
		<div class="tool-card-header">
			<div class="tool-icon-wrapper">
				<span class="material-symbols-rounded tool-icon">{ tool.Icon }</span>
			</div>
			<div class="tool-status" data-status={ tool.Status }>
				<span class="status-dot"></span>
				<span class="status-text">{ tool.StatusText }</span>
			</div>
		</div>
		
		<div class="tool-card-body">
			<h3 class="tool-name">{ tool.Name }</h3>
			<p class="tool-description">{ tool.Description }</p>
			
			<div class="tool-stats">
				<div class="stat-item">
					<span class="stat-label">{ i18n.T("tools.usage_today", lang) }</span>
					<span class="stat-value">{ formatNumber(tool.UsageToday) }</span>
				</div>
				<div class="stat-item">
					<span class="stat-label">{ i18n.T("tools.success_rate", lang) }</span>
					<span class="stat-value">{ formatPercent(tool.SuccessRate) }%</span>
				</div>
				<div class="stat-item">
					<span class="stat-label">{ i18n.T("tools.last_used", lang) }</span>
					<span class="stat-value">{ tool.LastUsed }</span>
				</div>
			</div>
		</div>
		
		<div class="tool-card-actions">
			<button class="btn btn-text" data-tool-id={ tool.ID } onclick="configureTool(this.dataset.toolId)">
				<span class="material-symbols-rounded">settings</span>
				{ i18n.T("tools.configure", lang) }
			</button>
			<button class="btn btn-text" data-tool-id={ tool.ID } onclick="viewToolLogs(this.dataset.toolId)">
				<span class="material-symbols-rounded">description</span>
				{ i18n.T("tools.logs", lang) }
			</button>
			<button class="btn btn-primary" data-tool-id={ tool.ID } onclick="testTool(this.dataset.toolId)">
				<span class="material-symbols-rounded">play_arrow</span>
				{ i18n.T("tools.test", lang) }
			</button>
		</div>
	</div>
	
	<script>
		function configureTool(toolId) {
			window.location.href = '/tools/' + toolId + '/config';
		}
		
		function viewToolLogs(toolId) {
			window.location.href = '/tools/' + toolId + '/logs';
		}
		
		function testTool(toolId) {
			// TODO: Implement tool testing via HTMX
			console.log('Testing tool:', toolId);
		}
	</script>
}

func formatNumber(n int) string {
	// Simple number formatting
	if n >= 1000 {
		return fmt.Sprintf("%.1fk", float64(n)/1000)
	}
	return strconv.Itoa(n)
}

func formatPercent(p float32) string {
	return fmt.Sprintf("%.1f", p)
}