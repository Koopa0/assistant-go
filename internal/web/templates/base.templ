package templates

import "github.com/koopa0/assistant-go/internal/web/i18n"

// BaseLayout provides the foundational HTML structure with Material Design 3 styling and i18n support
templ BaseLayout(data BaseLayoutData) {
	<!DOCTYPE html>
	<html lang={ data.Lang } class="h-full">
	<head>
		<meta charset="UTF-8"/>
		<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
		<meta name="description" content={ data.Description }/>
		<title>{ data.Title } - GoAssistant</title>

		<!-- Design System CSS -->
		<link href="/static/css/design-system.css" rel="stylesheet"/>

		<!-- Google Fonts - Roboto and Noto Sans TC for i18n -->
		<link rel="preconnect" href="https://fonts.googleapis.com"/>
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin/>
		<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&family=Noto+Sans+TC:wght@300;400;500;700&display=swap" rel="stylesheet"/>

		<!-- Material Symbols -->
		<link href="https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" rel="stylesheet"/>

		<!-- HTMX -->
		<script src="https://unpkg.com/htmx.org@1.9.10" defer></script>

		<!-- Theme and Language Detection Script -->
		<script>
			// Detect saved theme preference or system preference
			const savedTheme = localStorage.getItem('theme');
			const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;

			if (savedTheme === 'dark' || (!savedTheme && systemPrefersDark)) {
				document.documentElement.setAttribute('data-theme', 'dark');
			} else {
				document.documentElement.setAttribute('data-theme', 'light');
			}

			// Listen for system theme changes
			window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
				if (!localStorage.getItem('theme')) {
					document.documentElement.setAttribute('data-theme', e.matches ? 'dark' : 'light');
				}
			});
		</script>
	</head>
	<body class="h-full bg-background text-on-background font-sans antialiased" data-theme={ data.Theme }>
		{ children... }

		<!-- Enhanced Theme and Language Toggle Scripts -->
		<script>
			function toggleTheme() {
				const currentTheme = document.documentElement.getAttribute('data-theme');
				const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
				
				// Add transition class for smooth theme switching
				document.documentElement.classList.add('theme-transitioning');
				
				// Apply new theme
				document.documentElement.setAttribute('data-theme', newTheme);
				document.body.setAttribute('data-theme', newTheme);
				localStorage.setItem('theme', newTheme);

				// Create visual feedback for theme toggle
				const themeButton = document.querySelector('[onclick="toggleTheme()"]');
				if (themeButton) {
					themeButton.classList.add('animate-pulse');
					setTimeout(() => {
						themeButton.classList.remove('animate-pulse');
					}, 600);
				}

				// Remove transition class after animation completes
				setTimeout(() => {
					document.documentElement.classList.remove('theme-transitioning');
				}, 400);

				// Send theme change to server
				fetch('/api/preferences/theme', {
					method: 'POST',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({ theme: newTheme })
				}).catch(error => {
					console.warn('Failed to save theme preference:', error);
				});

				// Announce theme change for accessibility
				if (window.md3) {
					window.md3.announceToScreenReader(`Switched to ${newTheme} theme`);
				}
			}

			function switchLanguage(lang) {
				// Set language preference cookie
				document.cookie = `lang=${lang}; path=/; max-age=31536000`; // 1 year

				// Send language change to server and reload
				fetch('/api/preferences/language', {
					method: 'POST',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({ language: lang })
				}).then(() => {
					window.location.reload();
				});
			}
		</script>
	</body>
	</html>
}

// AppLayout provides the main application layout with clean header navigation
templ AppLayout(data AppLayoutData, content templ.Component) {
	@BaseLayout(data.BaseLayoutData) {
		<!-- Fixed Header -->
		<header class="header">
			<div class="header-content">
				<!-- Logo and Brand -->
				<div class="header-logo">
					<span class="material-symbols-rounded">smart_toy</span>
					<span>GoAssistant</span>
				</div>
				
				<!-- Navigation Links -->
				<nav class="header-nav">
					<a href="/" class={ "nav-link", templ.KV("active", data.CurrentPage == "home") }>
						{ i18n.T("nav.home", data.Lang) }
					</a>
					<a href="/chat" class={ "nav-link", templ.KV("active", data.CurrentPage == "chat") }>
						{ i18n.T("nav.chat", data.Lang) }
					</a>
					<a href="/tools" class={ "nav-link", templ.KV("active", data.CurrentPage == "tools") }>
						{ i18n.T("nav.tools", data.Lang) }
					</a>
					<a href="/settings" class={ "nav-link", templ.KV("active", data.CurrentPage == "settings") }>
						{ i18n.T("nav.settings", data.Lang) }
					</a>
				</nav>
				
				<!-- Header Actions -->
				<div class="header-actions">
					<button onclick="toggleTheme()" class="btn btn-icon" aria-label={ i18n.T("settings.theme", data.Lang) }>
						<span class="material-symbols-rounded">dark_mode</span>
					</button>
					<select onchange="switchLanguage(this.value)" class="language-select" aria-label={ i18n.T("settings.language", data.Lang) }>
						<option value="en" selected?={ data.Lang == "en" }>EN</option>
						<option value="zh-TW" selected?={ data.Lang == "zh-TW" }>繁中</option>
					</select>
					<button class="btn btn-icon" aria-label={ i18n.T("action.menu", data.Lang) }>
						<span class="material-symbols-rounded">account_circle</span>
					</button>
				</div>
			</div>
		</header>

		<!-- Main Content -->
		<main class="main-content">
			@content
		</main>
	}
}

// NavigationRail implements Material Design 3 navigation rail with i18n support
templ NavigationRail(currentPage string, lang string) {
	<nav class="w-20 lg:w-64 bg-surface-container border-r border-outline-variant flex flex-col" role="navigation" aria-label="Main navigation">
		<!-- Logo/Brand -->
		<div class="p-4 border-b border-outline-variant">
			<div class="flex items-center justify-center lg:justify-start">
				<div class="w-8 h-8 bg-primary rounded-medium flex items-center justify-center">
					<span class="material-symbols-outlined text-on-primary text-xl">assistant</span>
				</div>
				<span class="hidden lg:block ml-3 text-title-large font-medium text-on-surface">GoAssistant</span>
			</div>
		</div>

		<!-- Navigation Items -->
		<div class="flex-1 py-4">
			@NavigationItem("/", "home", i18n.T("nav.home", lang), currentPage == "dashboard")
			@NavigationItem("/chat", "chat", i18n.T("nav.chat", lang), currentPage == "chat")
			@NavigationItem("/tools", "build", i18n.T("nav.tools", lang), currentPage == "tools")
			@NavigationItem("/development", "code", i18n.T("nav.development", lang), currentPage == "development")
			@NavigationItem("/database", "storage", i18n.T("nav.database", lang), currentPage == "database")
			@NavigationItem("/infrastructure", "cloud", i18n.T("nav.infrastructure", lang), currentPage == "infrastructure")
			@NavigationItem("/settings", "settings", i18n.T("nav.settings", lang), currentPage == "settings")
		</div>

		<!-- Language and Theme Controls -->
		<div class="p-4 border-t border-outline-variant space-y-2">
			<!-- Language Selector -->
			<div class="relative">
				<select
					onchange="switchLanguage(this.value)"
					class="w-full bg-surface-variant text-on-surface-variant rounded-medium p-2 text-label-medium focus:outline-none focus:ring-2 focus:ring-primary"
					aria-label={ i18n.T("settings.language", lang) }
				>
					<option value="en" selected?={ lang == "en" }>English</option>
					<option value="zh-TW" selected?={ lang == "zh-TW" }>繁體中文</option>
				</select>
			</div>

			<!-- Theme Toggle -->
			<button
				onclick="toggleTheme()"
				class="w-full flex items-center justify-center lg:justify-start p-3 rounded-large hover:bg-surface-variant transition-standard focus-visible"
				aria-label={ i18n.T("settings.theme", lang) }
			>
				<span class="material-symbols-outlined text-on-surface-variant">dark_mode</span>
				<span class="hidden lg:block ml-3 text-label-large text-on-surface-variant">{ i18n.T("settings.theme", lang) }</span>
			</button>
		</div>
	</nav>
}

// NavigationItem represents a single navigation item
templ NavigationItem(href string, icon string, label string, isActive bool) {
	<a
		href={ templ.URL(href) }
		hx-boost="true"
		class={
			"flex items-center justify-center lg:justify-start mx-2 mb-1 p-3 rounded-large transition-standard focus-visible",
			templ.KV("bg-secondary-container text-on-secondary-container", isActive),
			templ.KV("hover:bg-surface-variant text-on-surface-variant", !isActive)
		}
		role="menuitem"
		if isActive {
			aria-current="page"
		}
	>
		<span class={ "material-symbols-outlined", templ.KV("text-on-secondary-container", isActive), templ.KV("text-on-surface-variant", !isActive) }>
			{ icon }
		</span>
		<span class={ "hidden lg:block ml-3 text-label-large", templ.KV("text-on-secondary-container", isActive), templ.KV("text-on-surface-variant", !isActive) }>
			{ label }
		</span>
	</a>
}

// TopAppBar implements Material Design 3 top app bar with i18n support
templ TopAppBar(title string, lang string) {
	<header class="h-16 bg-surface border-b border-outline-variant flex items-center px-6" role="banner">
		<h1 class="text-title-large font-medium text-on-surface">{ title }</h1>

		<div class="flex-1"></div>

		<!-- Action Buttons -->
		<div class="flex items-center space-x-2">
			<!-- Search Button -->
			<button
				class="p-2 rounded-large hover:bg-surface-variant transition-standard focus-visible"
				aria-label={ i18n.T("action.search", lang) }
				hx-get="/search"
				hx-target="#search-modal"
				hx-swap="innerHTML"
			>
				<span class="material-symbols-outlined text-on-surface-variant">search</span>
			</button>

			<!-- Notifications Button -->
			<button
				class="p-2 rounded-large hover:bg-surface-variant transition-standard focus-visible"
				aria-label={ i18n.T("settings.notifications", lang) }
				hx-get="/notifications"
				hx-target="#notifications-panel"
				hx-swap="innerHTML"
			>
				<span class="material-symbols-outlined text-on-surface-variant">notifications</span>
			</button>

			<!-- User Menu Button -->
			<button
				class="p-2 rounded-large hover:bg-surface-variant transition-standard focus-visible"
				aria-label={ i18n.T("action.menu", lang) }
				hx-get="/user-menu"
				hx-target="#user-menu-panel"
				hx-swap="innerHTML"
			>
				<span class="material-symbols-outlined text-on-surface-variant">account_circle</span>
			</button>
		</div>

		<!-- Hidden panels for HTMX targets -->
		<div id="search-modal" class="hidden"></div>
		<div id="notifications-panel" class="hidden"></div>
		<div id="user-menu-panel" class="hidden"></div>
	</header>
}
