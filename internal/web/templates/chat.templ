package templates

import (
	"fmt"
	"github.com/koopa0/assistant-go/internal/web/i18n"
)

// ChatPage implements the chat interface based on ui.md specifications
templ ChatPage(data ChatPageData) {
	@AppLayout(data.AppLayoutData, chatPageContent(data))
}

templ chatPageContent(data ChatPageData) {
	<!-- Enhanced Chat Container with Glassmorphism -->
	<div class="h-full flex bg-surface/50 backdrop-blur-lg">
		<!-- Enhanced Chat Sidebar with Smooth Animations -->
		<aside class="w-80 bg-surface-container/80 backdrop-blur-md border-r border-outline-variant/30 flex flex-col transition-all duration-300 hover:bg-surface-container/90">
			<!-- Animated Header -->
			<div class="p-4 border-b border-outline-variant/30">
				<button 
					class="w-full md3-button md3-button--filled h-12 hover-lift transition-all duration-300 active:scale-95"
					hx-post="/api/chat/new"
					hx-target="#messages"
					hx-swap="innerHTML"
					hx-indicator=".loading-indicator"
				>
					<span class="material-symbols-rounded mr-2 transition-transform duration-200 group-hover:rotate-90">add</span>
					{ i18n.T("chat.new_conversation", data.Lang) }
					<div class="ripple-effect"></div>
				</button>
			</div>
			
			<!-- Enhanced Chat History with Staggered Animations -->
			<div class="flex-1 overflow-y-auto p-4 space-y-2">
				<h3 class="text-sm font-medium text-on-surface-variant mb-4 flex items-center gap-2">
					<span class="material-symbols-rounded text-base">history</span>
					{ i18n.T("home.recent_chats", data.Lang) }
				</h3>
				for i, chat := range data.RecentChats {
					<div 
						class={ 
							"group relative p-3 rounded-xl cursor-pointer transition-all duration-200 hover-lift animate-slideIn",
							templ.KV("bg-primary-container text-on-primary-container shadow-md", chat.IsActive),
							templ.KV("hover:bg-surface-variant text-on-surface", !chat.IsActive)
						} 
						data-chat-id={ chat.ID }
						hx-get={ fmt.Sprintf("/api/chat/%s", chat.ID) }
						hx-target="#chat-main"
						hx-swap="innerHTML"
						hx-indicator=".loading-indicator"
						style={ fmt.Sprintf("animation-delay: %dms", i*50) }
					>
						<!-- Animated Status Indicator -->
						if chat.IsActive {
							<div class="absolute -left-1 top-1/2 transform -translate-y-1/2 w-1 h-8 bg-primary rounded-r-full animate-pulse"></div>
						}
						
						<div class="flex items-start gap-3">
							<div class="w-2 h-2 bg-primary rounded-full mt-2 transition-all duration-200 group-hover:scale-125"></div>
							<div class="flex-1 min-w-0">
								<div class="font-medium text-sm line-clamp-1 mb-1">{ chat.Title }</div>
								<div class="text-xs opacity-70 line-clamp-2 mb-2">{ chat.Preview }</div>
								<div class="text-xs opacity-60">{ chat.Time }</div>
							</div>
						</div>
						
						<!-- Hidden Action Buttons with Reveal Animation -->
						<div class="absolute top-2 right-2 flex gap-1 opacity-0 group-hover:opacity-100 transition-all duration-200 transform translate-x-2 group-hover:translate-x-0">
							<button class="p-1.5 hover:bg-surface-variant rounded-lg transition-colors" title="Pin">
								<span class="material-symbols-rounded text-xs">push_pin</span>
							</button>
							<button class="p-1.5 hover:bg-error-container text-error rounded-lg transition-colors" title="Delete">
								<span class="material-symbols-rounded text-xs">delete</span>
							</button>
						</div>
					</div>
				}
			</div>
		</aside>
		
		<!-- Enhanced Main Chat Area with Modern Layout -->
		<div class="flex-1 flex flex-col bg-surface/30 backdrop-blur-sm" id="chat-main">
			<!-- Modern Chat Header -->
			<div class="p-4 border-b border-outline-variant/30 bg-surface-container/50 backdrop-blur-md">
				<div class="flex items-center justify-between">
					<div class="flex items-center gap-3">
						<div class="w-10 h-10 bg-gradient-to-br from-primary to-secondary rounded-xl flex items-center justify-center shadow-md">
							<span class="material-symbols-rounded text-white">auto_awesome</span>
						</div>
						<div>
							<h1 class="font-semibold text-on-surface">Assistant</h1>
							<p class="text-sm text-on-surface-variant flex items-center gap-1">
								<span class="w-2 h-2 bg-green-500 rounded-full animate-pulse"></span>
								Online
							</p>
						</div>
					</div>
					<div class="flex items-center gap-2">
						<button class="p-2 hover:bg-surface-variant rounded-lg transition-colors">
							<span class="material-symbols-rounded">search</span>
						</button>
						<button class="p-2 hover:bg-surface-variant rounded-lg transition-colors">
							<span class="material-symbols-rounded">more_vert</span>
						</button>
					</div>
				</div>
			</div>
			
			<!-- Enhanced Messages Container with Smooth Scrolling -->
			<div class="flex-1 overflow-y-auto p-6 space-y-6" id="messages" hx-swap-oob="true">
				if len(data.Messages) == 0 {
					<!-- Beautiful Empty State -->
					<div class="flex flex-col items-center justify-center h-full text-center animate-fadeIn">
						<div class="w-24 h-24 bg-gradient-to-br from-primary/20 to-secondary/20 rounded-3xl flex items-center justify-center mb-6 animate-bounce-in">
							<span class="material-symbols-rounded text-4xl text-primary">chat</span>
						</div>
						<h2 class="text-2xl font-semibold text-on-surface mb-2">{ i18n.T("chat.start_conversation", data.Lang) }</h2>
						<p class="text-on-surface-variant mb-8 max-w-md">{ i18n.T("chat.select_topic", data.Lang) }</p>
						
						<!-- Animated Suggestion Cards -->
						<div class="grid grid-cols-1 md:grid-cols-2 gap-4 w-full max-w-2xl">
							@ModernSuggestionCard("Code Review", "code", "Can you help me review this code for best practices?")
							@ModernSuggestionCard("Documentation", "description", "Help me write documentation for my project")
							@ModernSuggestionCard("Debug Issue", "bug_report", "I'm having trouble with this error message")
							@ModernSuggestionCard("Architecture", "architecture", "What's the best architecture for this application?")
						</div>
					</div>
				} else {
					<!-- Enhanced Message List with Staggered Animations -->
					for i, msg := range data.Messages {
						<div 
							class="animate-slideUp" 
							style={ fmt.Sprintf("animation-delay: %dms", i*100) }
						>
							@ModernChatMessage(Message{
								Role: msg.Role,
								Content: msg.Content,
								Timestamp: msg.Timestamp,
							}, data.Lang)
							
							<!-- Enhanced Streaming Indicator -->
							if msg.Role != "user" && msg.IsStreaming {
								<div class="flex justify-start ml-13 mt-2">
									<div class="bg-surface-container rounded-xl px-4 py-3 shadow-sm">
										<div class="flex items-center gap-2">
											<div class="typing-indicator-modern">
												<span></span>
												<span></span>
												<span></span>
											</div>
											<span class="text-xs text-on-surface-variant">Assistant is typing...</span>
										</div>
									</div>
								</div>
							}
						</div>
					}
				}
				
				<!-- Loading Indicator for HTMX -->
				<div class="loading-indicator htmx-indicator flex justify-center py-4">
					<div class="bg-surface-container rounded-xl px-4 py-3 shadow-md animate-pulse">
						<div class="flex items-center gap-3">
							<div class="w-6 h-6 border-2 border-primary border-t-transparent rounded-full animate-spin"></div>
							<span class="text-sm text-on-surface-variant">Loading...</span>
						</div>
					</div>
				</div>
			</div>
			
			<!-- Enhanced Input Area with Modern Design -->
			<div class="p-4 border-t border-outline-variant/30 bg-surface-container/50 backdrop-blur-md">
				<div class="max-w-4xl mx-auto">
					<!-- Enhanced Input Form with HTMX -->
					<form 
						hx-post="/api/chat/send"
						hx-target="#messages"
						hx-swap="beforeend"
						hx-indicator=".loading-indicator"
						class="relative"
					>
						<div class="flex items-end gap-3 p-3 bg-surface rounded-2xl border border-outline-variant/50 shadow-lg hover:shadow-xl transition-all duration-300 focus-within:border-primary focus-within:shadow-primary/20">
							<!-- Enhanced Attachment Button -->
							<button 
								type="button"
								class="p-2 hover:bg-surface-variant rounded-xl transition-all duration-200 active:scale-95 group"
								data-action="attach-file"
							>
								<span class="material-symbols-rounded text-on-surface-variant group-hover:text-primary transition-colors">attach_file</span>
								<div class="ripple-effect"></div>
							</button>
							
							<!-- Enhanced Auto-Resizing Textarea -->
							<textarea 
								id="chat-input"
								name="message"
								class="flex-1 resize-none bg-transparent text-on-surface placeholder-on-surface-variant focus:outline-none transition-all duration-200 min-h-[2.5rem] max-h-32" 
								placeholder={ i18n.T("chat.type_message", data.Lang) }
								rows="1"
								data-action="auto-resize"
								required
							></textarea>
							
							<!-- Enhanced Send Button with State Management -->
							<button 
								type="submit"
								id="send-btn"
								class="p-2 bg-primary text-on-primary rounded-xl hover:bg-primary/90 transition-all duration-200 active:scale-95 disabled:bg-surface-variant disabled:text-on-surface-variant group"
								disabled
							>
								<span class="material-symbols-rounded group-hover:transform group-hover:rotate-12 transition-transform duration-200">send</span>
								<div class="ripple-effect"></div>
							</button>
						</div>
						
						<!-- Typing Indicator for Real-time Feedback -->
						<div class="flex items-center justify-between mt-2 text-xs text-on-surface-variant">
							<div class="flex items-center gap-2">
								<span class="material-symbols-rounded text-sm">keyboard</span>
								<span>Press Enter to send, Shift+Enter for new line</span>
							</div>
							<div id="char-counter" class="opacity-50">0/2000</div>
						</div>
					</form>
				</div>
			</div>
		</div>
	</div>
	
	<!-- Enhanced JavaScript with Modern Interactions -->
	<script>
		document.addEventListener('DOMContentLoaded', function() {
			const chatInput = document.getElementById('chat-input');
			const sendBtn = document.getElementById('send-btn');
			const charCounter = document.getElementById('char-counter');
			const messagesContainer = document.getElementById('messages');
			
			// Enhanced Auto-resize with Animation
			if (chatInput) {
				chatInput.addEventListener('input', function() {
					// Auto-resize
					this.style.height = 'auto';
					this.style.height = Math.min(this.scrollHeight, 128) + 'px';
					
					// Update character counter
					const length = this.value.length;
					if (charCounter) {
						charCounter.textContent = `${length}/2000`;
						charCounter.classList.toggle('text-error', length > 1800);
					}
					
					// Enable/disable send button
					if (sendBtn) {
						sendBtn.disabled = !this.value.trim();
					}
				});
				
				// Enhanced keyboard handling
				chatInput.addEventListener('keydown', function(event) {
					if (event.key === 'Enter' && !event.shiftKey) {
						event.preventDefault();
						if (this.value.trim() && !sendBtn.disabled) {
							// Trigger HTMX form submission
							const form = this.closest('form');
							if (form) {
								htmx.trigger(form, 'submit');
							}
						}
					}
				});
			}
			
			// Enhanced attachment handling
			document.addEventListener('click', function(event) {
				if (event.target.closest('[data-action="attach-file"]')) {
					// Create and trigger file input
					const fileInput = document.createElement('input');
					fileInput.type = 'file';
					fileInput.multiple = true;
					fileInput.accept = '.txt,.md,.pdf,.doc,.docx,.jpg,.jpeg,.png,.gif';
					fileInput.style.display = 'none';
					
					fileInput.addEventListener('change', function() {
						if (this.files.length > 0) {
							// Handle file upload with visual feedback
							showFilePreview(Array.from(this.files));
						}
					});
					
					document.body.appendChild(fileInput);
					fileInput.click();
					document.body.removeChild(fileInput);
				}
			});
			
			// Suggestion card interactions
			window.setPrompt = function(prompt) {
				if (chatInput) {
					chatInput.value = prompt;
					chatInput.focus();
					chatInput.dispatchEvent(new Event('input'));
					
					// Smooth scroll to input
					chatInput.scrollIntoView({ behavior: 'smooth', block: 'center' });
				}
			};
			
			// File preview function
			function showFilePreview(files) {
				// Create preview container
				const preview = document.createElement('div');
				preview.className = 'flex gap-2 mb-3 animate-slideIn';
				
				files.forEach(file => {
					const fileChip = document.createElement('div');
					fileChip.className = 'flex items-center gap-2 bg-primary-container text-on-primary-container px-3 py-1 rounded-full text-sm';
					fileChip.innerHTML = `
						<span class="material-symbols-rounded text-sm">description</span>
						<span>${file.name}</span>
						<button class="ml-1 hover:bg-primary/20 rounded-full p-0.5" onclick="this.parentElement.remove()">
							<span class="material-symbols-rounded text-xs">close</span>
						</button>
					`;
					preview.appendChild(fileChip);
				});
				
				// Insert preview before input
				const inputContainer = chatInput.closest('.p-4');
				if (inputContainer) {
					inputContainer.insertBefore(preview, inputContainer.firstChild);
				}
			}
			
			// Enhanced scroll to bottom for new messages
			function scrollToBottom() {
				if (messagesContainer) {
					messagesContainer.scrollTo({
						top: messagesContainer.scrollHeight,
						behavior: 'smooth'
					});
				}
			}
			
			// HTMX event listeners for enhanced UX
			document.body.addEventListener('htmx:beforeRequest', function() {
				if (sendBtn) sendBtn.disabled = true;
			});
			
			document.body.addEventListener('htmx:afterRequest', function(event) {
				if (sendBtn) sendBtn.disabled = false;
				if (chatInput && event.detail.successful) {
					chatInput.value = '';
					chatInput.style.height = 'auto';
					if (charCounter) charCounter.textContent = '0/2000';
					scrollToBottom();
				}
			});
			
			// Ripple effect for buttons
			document.addEventListener('click', function(event) {
				const button = event.target.closest('button');
				if (button && button.querySelector('.ripple-effect')) {
					createRipple(event, button);
				}
			});
			
			function createRipple(event, button) {
				const ripple = button.querySelector('.ripple-effect');
				const rect = button.getBoundingClientRect();
				const size = Math.max(rect.width, rect.height);
				const x = event.clientX - rect.left - size / 2;
				const y = event.clientY - rect.top - size / 2;
				
				ripple.style.width = ripple.style.height = size + 'px';
				ripple.style.left = x + 'px';
				ripple.style.top = y + 'px';
				ripple.classList.add('ripple-active');
				
				setTimeout(() => {
					ripple.classList.remove('ripple-active');
				}, 600);
			}
		});
	</script>
}


// SuggestedPrompt renders a suggested conversation starter
templ SuggestedPrompt(text string, category string) {
	<button 
		class="md3-button md3-button--outlined w-full text-left hover-lift transition-all duration-200"
		onclick="setPrompt(this.dataset.prompt)" data-prompt={text}
	>
		<span class="material-symbols-outlined mr-2">lightbulb</span>
		<span>{ text }</span>
	</button>
}

// ChatAgentCard renders an agent selection card for chat
templ ChatAgentCard(agent Agent, isActive bool, lang string) {
	<div 
		class={
			"md3-card md3-card--outlined p-4 cursor-pointer transition-all duration-200 hover-lift group",
			templ.KV("md3-card--selected ring-2 ring-primary", isActive)
		}
		onclick="selectAgent(this.dataset.agentId)" data-agent-id={agent.ID}
	>
		<div class="flex items-center gap-3 mb-3">
			<div class={
				"w-8 h-8 rounded-medium flex items-center justify-center transition-all duration-200",
				templ.KV("bg-primary text-on-primary", isActive),
				templ.KV("bg-surface-variant text-on-surface-variant group-hover:bg-primary-container group-hover:text-on-primary-container", !isActive)
			}>
				<span class="material-symbols-outlined text-sm">psychology</span>
			</div>
			<div class="flex-1 min-w-0">
				<h4 class="md-typescale-title-small text-on-surface font-medium truncate">{ agent.Name }</h4>
				<div class="flex items-center gap-1">
					<div class="w-1.5 h-1.5 rounded-full bg-primary"></div>
					<span class="md-typescale-body-small text-on-surface-variant">
						{ agent.Status }
					</span>
				</div>
			</div>
		</div>
		<p class="md-typescale-body-small text-on-surface-variant line-clamp-2">{ agent.Description }</p>
		<div class="flex items-center justify-between mt-3">
			<span class="md-typescale-label-small text-on-surface-variant">
				AI Agent
			</span>
			if isActive {
				<span class="md-typescale-label-small text-primary">
					{ i18n.T("status.active", lang) }
				</span>
			}
		</div>
	</div>
}

// ModernChatMessage renders a modern chat message with enhanced design
templ ModernChatMessage(message Message, lang string) {
	<div class={
		"flex gap-4 animate-fadeIn group",
		templ.KV("justify-end", message.Role == "user"),
		templ.KV("justify-start", message.Role != "user")
	}>
		if message.Role != "user" {
			<!-- Modern AI Avatar -->
			<div class="flex-shrink-0 w-9 h-9 bg-gradient-to-br from-primary to-secondary rounded-xl flex items-center justify-center shadow-sm">
				<span class="material-symbols-outlined text-white text-lg">auto_awesome</span>
			</div>
		}
		
		<!-- Modern Message Bubble -->
		<div class={
			"relative max-w-[75%] rounded-2xl px-4 py-3 shadow-sm transition-all duration-200 group-hover:shadow-md",
			templ.KV("bg-primary text-on-primary rounded-br-md", message.Role == "user"),
			templ.KV("bg-surface-container text-on-surface rounded-bl-md", message.Role != "user")
		}>
			<!-- Message Content with Enhanced Typography -->
			<div class="prose prose-sm max-w-none">
				<div class="text-sm leading-relaxed whitespace-pre-wrap">
					{ message.Content }
				</div>
			</div>
			
			<!-- Enhanced Metadata Display -->
			if message.Metadata != nil && len(message.Metadata) > 0 {
				<div class="mt-3 space-y-2">
					if attachments, ok := message.Metadata["attachments"].([]interface{}); ok {
						for _, attachment := range attachments {
							<div class="flex items-center gap-2 p-2 bg-outline/10 rounded-lg text-xs">
								<span class="material-symbols-outlined text-sm">description</span>
								<span>{ fmt.Sprintf("%v", attachment) }</span>
							</div>
						}
					}
				</div>
			}
			
			<!-- Subtle Timestamp -->
			<div class="mt-2 text-xs opacity-60">
				{ i18n.FormatTime(message.Timestamp, lang) }
			</div>
		</div>
		
		if message.Role == "user" {
			<!-- Modern User Avatar -->
			<div class="flex-shrink-0 w-9 h-9 bg-secondary-container rounded-xl flex items-center justify-center">
				<span class="material-symbols-outlined text-on-secondary-container text-lg">person</span>
			</div>
		}
	</div>
}

// ModernSuggestionCard renders an interactive suggestion card
templ ModernSuggestionCard(title string, icon string, prompt string) {
	<button 
		class="group p-4 bg-surface-container border border-outline-variant rounded-xl hover:bg-primary-container hover:border-primary transition-all duration-200 text-left w-full"
		onclick="setPrompt(this.dataset.prompt)" 
		data-prompt={prompt}
	>
		<div class="flex items-start gap-3">
			<div class="w-8 h-8 bg-primary/10 group-hover:bg-primary group-hover:text-white rounded-lg flex items-center justify-center transition-all duration-200">
				<span class="material-symbols-outlined text-primary group-hover:text-white text-lg">{ icon }</span>
			</div>
			<div class="flex-1">
				<h3 class="font-medium text-on-surface group-hover:text-on-primary-container mb-1">{ title }</h3>
				<p class="text-sm text-on-surface-variant group-hover:text-on-primary-container/80 line-clamp-2">
					{ prompt }
				</p>
			</div>
		</div>
	</button>
}

// ChatHistoryItem renders a chat history item in the sidebar
templ ChatHistoryItem(period string, title string, time string, isActive bool) {
	<div class={
		"group p-3 rounded-lg cursor-pointer transition-all duration-200",
		templ.KV("bg-primary-container text-on-primary-container", isActive),
		templ.KV("hover:bg-surface-variant text-on-surface", !isActive)
	}>
		<div class="flex items-center justify-between mb-1">
			<span class="text-xs font-medium opacity-70">{ period }</span>
			<span class="text-xs opacity-60">{ time }</span>
		</div>
		<div class="font-medium text-sm line-clamp-1">{ title }</div>
		<div class="flex items-center gap-2 mt-2 opacity-0 group-hover:opacity-100 transition-opacity">
			<button class="p-1 hover:bg-surface rounded" title="Pin">
				<span class="material-symbols-outlined text-xs">push_pin</span>
			</button>
			<button class="p-1 hover:bg-error-container rounded text-error" title="Delete">
				<span class="material-symbols-outlined text-xs">delete</span>
			</button>
		</div>
	</div>
}

// CompactAgentCard renders a compact agent selection card
templ CompactAgentCard(agent Agent, isActive bool) {
	<div 
		class={
			"group p-3 rounded-lg cursor-pointer transition-all duration-200 flex items-center gap-3",
			templ.KV("bg-primary-container text-on-primary-container", isActive),
			templ.KV("hover:bg-surface-variant text-on-surface", !isActive)
		}
		onclick="selectAgent(this.dataset.agentId)" 
		data-agent-id={agent.ID}
	>
		<div class={
			"w-8 h-8 rounded-lg flex items-center justify-center flex-shrink-0",
			templ.KV("bg-primary text-on-primary", isActive),
			templ.KV("bg-surface-variant text-on-surface-variant", !isActive)
		}>
			<span class="material-symbols-outlined text-sm">psychology</span>
		</div>
		<div class="flex-1 min-w-0">
			<div class="font-medium text-sm line-clamp-1">{ agent.Name }</div>
			<div class="text-xs opacity-70 line-clamp-1">{ agent.Description }</div>
		</div>
		if isActive {
			<div class="w-2 h-2 bg-primary rounded-full flex-shrink-0"></div>
		}
	</div>
}

// ChatPageData represents the data for the chat page
type ChatPageData struct {
	AppLayoutData
	Messages    []ChatMessage
	RecentChats []ChatItem
}

type ChatMessage struct {
	ID          string
	Role        string // "user" or "assistant"
	Content     string
	IsStreaming bool
	Timestamp   string
}

type ChatItem struct {
	ID       string
	Title    string
	Preview  string
	Time     string
	IsActive bool
}