package templates

import (
    "fmt"
)

type DevelopmentPageData struct {
    AppLayoutData
    CodeAnalysis    CodeAnalysisData
    RecentProjects  []ProjectItem
    ActiveTools     []DevelopmentTool
}

type CodeAnalysisData struct {
    CurrentFile     string
    Language        string
    LinesOfCode     int
    Complexity      int
    TestCoverage    float32
    Issues          []DevelopmentCodeIssue
    Suggestions     []CodeSuggestion
}

type ProjectItem struct {
    ID           string
    Name         string
    Path         string
    Language     string
    LastModified string
    Status       string // "active", "idle", "error"
}

type DevelopmentTool struct {
    ID          string
    Name        string
    Category    string // "analysis", "testing", "debugging", "profiling"
    Status      string // "running", "ready", "error"
    LastUsed    string
}

type DevelopmentCodeIssue struct {
    Type        string // "error", "warning", "info"
    Line        int
    Column      int
    Message     string
    Suggestion  string
}

type CodeSuggestion struct {
    Type        string // "optimization", "refactor", "security", "style"
    Priority    string // "high", "medium", "low"
    Title       string
    Description string
    CodeSnippet string
}

templ DevelopmentAssistantPage(data DevelopmentPageData) {
    @AppLayout(data.AppLayoutData, developmentContent(data))
}

templ developmentContent(data DevelopmentPageData) {
    <div class="development-assistant">
        <!-- Header Section -->
        <div class="page-header">
            <div class="header-content">
                <h1 class="page-title">Development Assistant</h1>
                <p class="page-subtitle">AI-powered code analysis and development tools</p>
            </div>
            <div class="header-actions">
                <button class="btn-text" onclick="openProjectSelector()">
                    <span class="material-icons-round">folder_open</span>
                    Open Project
                </button>
                <button class="btn-primary" onclick="analyzeCurrentFile()">
                    <span class="material-icons-round">analytics</span>
                    Analyze Code
                </button>
            </div>
        </div>

        <!-- Main Content Grid -->
        <div class="development-grid">
            <!-- Left Panel: Project Explorer -->
            <div class="project-panel">
                <div class="panel-header">
                    <h3>Recent Projects</h3>
                    <button class="btn-icon" onclick="refreshProjects()">
                        <span class="material-icons-round">refresh</span>
                    </button>
                </div>
                <div class="project-list">
                    for _, project := range data.RecentProjects {
                        <div class={ "project-item", templ.KV("active", project.Status == "active") } 
                             data-project-id={ project.ID }
                             onclick="loadProject(this.dataset.projectId)">
                            <div class="project-icon">
                                <span class="material-icons-round">
                                    { getLanguageIcon(project.Language) }
                                </span>
                            </div>
                            <div class="project-info">
                                <h4>{ project.Name }</h4>
                                <p>{ project.Path }</p>
                                <span class="project-meta">{ project.LastModified }</span>
                            </div>
                            <div class={ "status-indicator", project.Status }></div>
                        </div>
                    }
                </div>
            </div>

            <!-- Center Panel: Code Analysis -->
            <div class="analysis-panel">
                if data.CodeAnalysis.CurrentFile != "" {
                    <div class="analysis-header">
                        <div class="file-info">
                            <h3>{ data.CodeAnalysis.CurrentFile }</h3>
                            <div class="file-stats">
                                <span class="stat-badge">
                                    <span class="material-icons-round">code</span>
                                    { fmt.Sprintf("%d lines", data.CodeAnalysis.LinesOfCode) }
                                </span>
                                <span class="stat-badge">
                                    <span class="material-icons-round">psychology</span>
                                    Complexity: { fmt.Sprintf("%d", data.CodeAnalysis.Complexity) }
                                </span>
                                <span class="stat-badge">
                                    <span class="material-icons-round">verified</span>
                                    Coverage: { fmt.Sprintf("%.1f%%", data.CodeAnalysis.TestCoverage) }
                                </span>
                            </div>
                        </div>
                        <div class="analysis-actions">
                            <button class="btn-text" onclick="runTests()">
                                <span class="material-icons-round">play_circle</span>
                                Run Tests
                            </button>
                            <button class="btn-text" onclick="debugCode()">
                                <span class="material-icons-round">bug_report</span>
                                Debug
                            </button>
                            <button class="btn-text" onclick="profileCode()">
                                <span class="material-icons-round">speed</span>
                                Profile
                            </button>
                        </div>
                    </div>

                    <!-- Issues Section -->
                    if len(data.CodeAnalysis.Issues) > 0 {
                        <div class="issues-section">
                            <h4>Issues Found ({ len(data.CodeAnalysis.Issues) })</h4>
                            <div class="issues-list">
                                for _, issue := range data.CodeAnalysis.Issues {
                                    <div class={ "issue-item", issue.Type }>
                                        <div class="issue-icon">
                                            <span class="material-icons-round">
                                                { getIssueIcon(issue.Type) }
                                            </span>
                                        </div>
                                        <div class="issue-content">
                                            <div class="issue-location">
                                                Line { fmt.Sprintf("%d", issue.Line) }, Column { fmt.Sprintf("%d", issue.Column) }
                                            </div>
                                            <div class="issue-message">{ issue.Message }</div>
                                            if issue.Suggestion != "" {
                                                <div class="issue-suggestion">
                                                    <span class="material-icons-round">lightbulb</span>
                                                    { issue.Suggestion }
                                                </div>
                                            }
                                        </div>
                                        <button class="btn-icon" data-line={ fmt.Sprintf("%d", issue.Line) } data-column={ fmt.Sprintf("%d", issue.Column) } onclick="fixIssue(this.dataset.line, this.dataset.column)">
                                            <span class="material-icons-round">auto_fix_high</span>
                                        </button>
                                    </div>
                                }
                            </div>
                        </div>
                    }

                    <!-- Suggestions Section -->
                    if len(data.CodeAnalysis.Suggestions) > 0 {
                        <div class="suggestions-section">
                            <h4>AI Suggestions</h4>
                            <div class="suggestions-grid">
                                for _, suggestion := range data.CodeAnalysis.Suggestions {
                                    <div class={ "suggestion-card", suggestion.Priority }>
                                        <div class="suggestion-header">
                                            <div class={ "suggestion-type", suggestion.Type }>
                                                <span class="material-icons-round">
                                                    { getSuggestionIcon(suggestion.Type) }
                                                </span>
                                                { suggestion.Type }
                                            </div>
                                            <span class={ "priority-badge", suggestion.Priority }>
                                                { suggestion.Priority }
                                            </span>
                                        </div>
                                        <h5>{ suggestion.Title }</h5>
                                        <p>{ suggestion.Description }</p>
                                        if suggestion.CodeSnippet != "" {
                                            <div class="code-snippet">
                                                <pre><code>{ suggestion.CodeSnippet }</code></pre>
                                            </div>
                                        }
                                        <div class="suggestion-actions">
                                            <button class="btn-text" onclick="applySuggestion(this)">
                                                <span class="material-icons-round">check</span>
                                                Apply
                                            </button>
                                            <button class="btn-text" onclick="learnMore(this)">
                                                <span class="material-icons-round">info</span>
                                                Learn More
                                            </button>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                } else {
                    <div class="empty-state">
                        <span class="material-icons-round">code</span>
                        <h3>No file selected</h3>
                        <p>Open a project or file to start code analysis</p>
                        <button class="btn-primary" onclick="openProjectSelector()">
                            <span class="material-icons-round">folder_open</span>
                            Open Project
                        </button>
                    </div>
                }
            </div>

            <!-- Right Panel: Development Tools -->
            <div class="tools-panel">
                <div class="panel-header">
                    <h3>Development Tools</h3>
                </div>
                <div class="tools-categories">
                    <!-- Analysis Tools -->
                    <div class="tool-category">
                        <h4>
                            <span class="material-icons-round">analytics</span>
                            Analysis
                        </h4>
                        <div class="tool-list">
                            for _, tool := range filterToolsByCategory(data.ActiveTools, "analysis") {
                                @developmentToolItem(tool)
                            }
                        </div>
                    </div>

                    <!-- Testing Tools -->
                    <div class="tool-category">
                        <h4>
                            <span class="material-icons-round">science</span>
                            Testing
                        </h4>
                        <div class="tool-list">
                            for _, tool := range filterToolsByCategory(data.ActiveTools, "testing") {
                                @developmentToolItem(tool)
                            }
                        </div>
                    </div>

                    <!-- Debugging Tools -->
                    <div class="tool-category">
                        <h4>
                            <span class="material-icons-round">bug_report</span>
                            Debugging
                        </h4>
                        <div class="tool-list">
                            for _, tool := range filterToolsByCategory(data.ActiveTools, "debugging") {
                                @developmentToolItem(tool)
                            }
                        </div>
                    </div>

                    <!-- Profiling Tools -->
                    <div class="tool-category">
                        <h4>
                            <span class="material-icons-round">speed</span>
                            Profiling
                        </h4>
                        <div class="tool-list">
                            for _, tool := range filterToolsByCategory(data.ActiveTools, "profiling") {
                                @developmentToolItem(tool)
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

templ developmentToolItem(tool DevelopmentTool) {
    <div class={ "tool-item", tool.Status } data-tool-id={ tool.ID }>
        <div class="tool-info">
            <h5>{ tool.Name }</h5>
            <span class="tool-meta">{ tool.LastUsed }</span>
        </div>
        <button class="btn-icon" data-tool-id={ tool.ID } onclick="runTool(this.dataset.toolId)">
            if tool.Status == "running" {
                <span class="material-icons-round spinning">sync</span>
            } else {
                <span class="material-icons-round">play_arrow</span>
            }
        </button>
    </div>
}

// Helper functions
func getLanguageIcon(language string) string {
    switch language {
    case "go":
        return "deployed_code"
    case "python":
        return "code"
    case "javascript", "typescript":
        return "javascript"
    case "java":
        return "coffee"
    default:
        return "code"
    }
}

func getIssueIcon(issueType string) string {
    switch issueType {
    case "error":
        return "error"
    case "warning":
        return "warning"
    case "info":
        return "info"
    default:
        return "info"
    }
}

func getSuggestionIcon(suggestionType string) string {
    switch suggestionType {
    case "optimization":
        return "speed"
    case "refactor":
        return "build"
    case "security":
        return "security"
    case "style":
        return "palette"
    default:
        return "lightbulb"
    }
}

func filterToolsByCategory(tools []DevelopmentTool, category string) []DevelopmentTool {
    var filtered []DevelopmentTool
    for _, tool := range tools {
        if tool.Category == category {
            filtered = append(filtered, tool)
        }
    }
    return filtered
}