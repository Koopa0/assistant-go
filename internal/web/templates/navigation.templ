package templates

import "github.com/koopa0/assistant-go/internal/web/i18n"

// EnhancedNavigationRail provides a professional MD3 navigation rail
templ EnhancedNavigationRail(currentPage string, lang string) {
	<nav 
		class="md3-navigation-rail stagger-children animate-slideInLeft" 
		role="navigation" 
		aria-label="Main navigation"
		style="--stagger-delay: 80ms"
	>
		<!-- Brand/Logo Section -->
		<div class="md3-navigation-rail__header" style="--stagger-index: 0">
			<div class="flex items-center justify-center lg:justify-start hover-lift">
				<div class="w-12 h-12 bg-primary rounded-extra-large flex items-center justify-center shadow-elevation-2 hover-glow transition-all duration-300 group">
					<span class="material-symbols-outlined text-on-primary text-xl group-hover:animate-pulse">smart_toy</span>
				</div>
				<div class="hidden lg:block ml-3 opacity-0 lg:opacity-100 transition-opacity duration-500">
					<h1 class="md-typescale-title-large text-on-surface font-medium mb-1">GoAssistant</h1>
					<p class="md-typescale-body-small text-on-surface-variant">AI Development Suite</p>
				</div>
			</div>
		</div>

		<!-- Main Navigation -->
		<div class="md3-navigation-rail__nav">
			<div style="--stagger-index: 1">
				@EnhancedNavigationItem("/", "dashboard", i18n.T("nav.home", lang), "Dashboard", currentPage == "dashboard")
			</div>
			<div style="--stagger-index: 2">
				@EnhancedNavigationItem("/chat", "chat", i18n.T("nav.chat", lang), "AI Chat Interface", currentPage == "chat")
			</div>
			<div style="--stagger-index: 3">
				@EnhancedNavigationItem("/tools", "construction", i18n.T("nav.tools", lang), "Development Tools", currentPage == "tools")
			</div>
			<div style="--stagger-index: 4">
				@EnhancedNavigationItem("/development", "code", i18n.T("nav.development", lang), "Code Analysis", currentPage == "development")
			</div>
			<div style="--stagger-index: 5">
				@EnhancedNavigationItem("/database", "storage", i18n.T("nav.database", lang), "Database Management", currentPage == "database")
			</div>
			<div style="--stagger-index: 6">
				@EnhancedNavigationItem("/infrastructure", "cloud", i18n.T("nav.infrastructure", lang), "Infrastructure Monitor", currentPage == "infrastructure")
			</div>
			
			<!-- Divider -->
			<div class="w-full h-px bg-outline-variant my-4 opacity-0 animate-fadeIn" style="--stagger-index: 7; animation-delay: calc(var(--stagger-delay, 80ms) * 7);"></div>
			
			<div style="--stagger-index: 8">
				@EnhancedNavigationItem("/research", "search", "Research", "AI Research Assistant", currentPage == "research")
			</div>
			<div style="--stagger-index: 9">
				@EnhancedNavigationItem("/analytics", "analytics", "Analytics", "Performance Analytics", currentPage == "analytics")
			</div>
		</div>

		<!-- Footer Section -->
		<div class="md3-navigation-rail__footer">
			<!-- Status Indicator -->
			<div class="flex items-center justify-center lg:justify-start mb-4">
				<div class="flex items-center gap-2">
					<div class="w-2 h-2 bg-primary rounded-full animate-pulse"></div>
					<span class="hidden lg:block md-typescale-body-small text-on-surface-variant">
						{ i18n.T("status.online", lang) }
					</span>
				</div>
			</div>

			<!-- Theme Toggle -->
			<button
				onclick="toggleTheme()"
				class="md3-icon-button w-full flex items-center justify-center lg:justify-start p-3 rounded-large transition-standard group"
				aria-label={ i18n.T("settings.theme", lang) }
				title={ i18n.T("settings.theme", lang) }
			>
				<span class="material-symbols-outlined">dark_mode</span>
				<span class="hidden lg:block ml-3 md-typescale-label-large">
					{ i18n.T("settings.theme", lang) }
				</span>
			</button>

			<!-- Language Selector -->
			<div class="relative mt-2">
				<select
					onchange="switchLanguage(this.value)"
					class="w-full bg-surface-variant text-on-surface-variant rounded-medium p-2 md-typescale-label-medium focus:outline-none focus:ring-2 focus:ring-primary border-none cursor-pointer transition-standard"
					aria-label={ i18n.T("settings.language", lang) }
				>
					<option value="en" selected?={ lang == "en" }>üåê EN</option>
					<option value="zh-TW" selected?={ lang == "zh-TW" }>üåê ÁπÅ‰∏≠</option>
				</select>
			</div>

			<!-- Settings Link -->
			@EnhancedNavigationItem("/settings", "settings", i18n.T("nav.settings", lang), "Application Settings", currentPage == "settings")
		</div>
	</nav>
}

// EnhancedNavigationItem represents a single enhanced navigation item with MD3 animations
templ EnhancedNavigationItem(href string, icon string, label string, description string, isActive bool) {
	<a
		href={ templ.URL(href) }
		hx-boost="true"
		class={
			"md3-navigation-item md3-state-layer group relative overflow-hidden opacity-0 animate-fadeIn hover-lift focus-ring",
			templ.KV("md3-navigation-item--active", isActive)
		}
		role="menuitem"
		if isActive {
			aria-current="page"
		}
		title={ description }
		style="animation-delay: calc(var(--stagger-delay, 80ms) * var(--stagger-index, 0))"
	>
		<!-- Background State Layer -->
		<div class={
			"absolute inset-0 rounded-large transition-all duration-300",
			templ.KV("bg-secondary-container opacity-100", isActive),
			templ.KV("bg-transparent group-hover:bg-surface-variant opacity-0 group-hover:opacity-100", !isActive)
		}></div>
		
		<!-- Content Container -->
		<div class="relative flex flex-col items-center justify-center p-4 min-h-[72px] lg:flex-row lg:justify-start lg:px-6">
			<!-- Icon with Enhanced Animation -->
			<div class={
				"flex items-center justify-center w-8 h-8 rounded-medium transition-all duration-300 group-hover:scale-110",
				templ.KV("bg-primary text-on-primary shadow-elevation-1", isActive),
				templ.KV("text-on-surface-variant group-hover:text-on-surface", !isActive)
			}>
				<span class="material-symbols-outlined text-xl font-medium">
					{ icon }
				</span>
			</div>
			
			<!-- Label with Smooth Transitions -->
			<span class={
				"mt-1 lg:mt-0 lg:ml-4 md-typescale-label-large font-medium text-center lg:text-left transition-all duration-300",
				templ.KV("text-on-secondary-container", isActive),
				templ.KV("text-on-surface-variant group-hover:text-on-surface", !isActive)
			}>
				{ label }
			</span>
		</div>
		
		<!-- Active Indicator -->
		if isActive {
			<div class="absolute left-0 top-1/2 transform -translate-y-1/2 w-1 h-8 bg-primary rounded-r-full shadow-elevation-1 animate-scaleIn"></div>
		}
		
		<!-- Ripple Effect Container -->
		<div class="absolute inset-0 overflow-hidden rounded-large pointer-events-none">
			<!-- Ripple will be added by JavaScript -->
		</div>
	</a>
}

// EnhancedTopAppBar provides a professional MD3 top app bar
templ EnhancedTopAppBar(title string, subtitle string, lang string) {
	<header class="md3-top-app-bar">
		<!-- Title Section -->
		<div class="flex-1 min-w-0">
			<h1 class="md3-top-app-bar__title truncate">{ title }</h1>
			if subtitle != "" {
				<p class="md-typescale-body-small text-on-surface-variant ml-16 -mt-1">{ subtitle }</p>
			}
		</div>

		<!-- Actions -->
		<div class="md3-top-app-bar__actions">
			<!-- Search -->
			<button
				class="md3-icon-button md3-state-layer"
				aria-label={ i18n.T("action.search", lang) }
				title={ i18n.T("action.search", lang) }
				hx-get="/search"
				hx-target="#search-modal"
				hx-swap="innerHTML"
			>
				<span class="material-symbols-outlined">search</span>
			</button>

			<!-- Notifications with Badge -->
			<div class="relative">
				<button
					class="md3-icon-button md3-state-layer"
					aria-label={ i18n.T("settings.notifications", lang) }
					title={ i18n.T("settings.notifications", lang) }
					hx-get="/notifications"
					hx-target="#notifications-panel"
					hx-swap="innerHTML"
				>
					<span class="material-symbols-outlined">notifications</span>
				</button>
				<!-- Notification Badge -->
				<div class="absolute -top-1 -right-1 w-4 h-4 bg-error text-on-error rounded-full flex items-center justify-center">
					<span class="md-typescale-label-small">3</span>
				</div>
			</div>

			<!-- User Menu -->
			<div class="relative">
				<button
					class="md3-icon-button md3-state-layer"
					aria-label={ i18n.T("action.menu", lang) }
					title={ i18n.T("action.menu", lang) }
					hx-get="/user-menu"
					hx-target="#user-menu-panel"
					hx-swap="innerHTML"
				>
					<span class="material-symbols-outlined">account_circle</span>
				</button>
			</div>

			<!-- System Status Indicator -->
			<div class="flex items-center gap-2 ml-4 px-3 py-1 bg-primary-container rounded-large">
				<div class="w-2 h-2 bg-primary rounded-full animate-pulse"></div>
				<span class="md-typescale-label-small text-on-primary-container">
					{ i18n.T("status.healthy", lang) }
				</span>
			</div>
		</div>

		<!-- Hidden panels for HTMX targets -->
		<div id="search-modal" class="hidden"></div>
		<div id="notifications-panel" class="hidden"></div>
		<div id="user-menu-panel" class="hidden"></div>
	</header>
}

// Breadcrumb navigation component
templ Breadcrumb(items []BreadcrumbItem, lang string) {
	<nav class="flex items-center gap-2 px-6 py-3 bg-surface-container-low border-b border-outline-variant" aria-label="Breadcrumb">
		<ol class="flex items-center gap-2">
			for i, item := range items {
				<li class="flex items-center gap-2">
					if i > 0 {
						<span class="material-symbols-outlined text-on-surface-variant text-sm">chevron_right</span>
					}
					if item.IsActive {
						<span class="md-typescale-body-medium text-on-surface font-medium" aria-current="page">
							{ item.Label }
						</span>
					} else {
						<a 
							href={ templ.URL(item.Href) } 
							class="md-typescale-body-medium text-primary hover:text-primary transition-standard"
							hx-boost="true"
						>
							{ item.Label }
						</a>
					}
				</li>
			}
		</ol>
	</nav>
}

// BreadcrumbItem represents a breadcrumb item
type BreadcrumbItem struct {
	Label    string
	Href     string
	IsActive bool
}